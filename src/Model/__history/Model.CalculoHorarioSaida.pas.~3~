unit Model.CalculoHorarioSaida;

interface

uses
  System.SysUtils;

type
  TCalculoHorarioSaida = class
    private
      FHoraInicio,
      FHoraInicioAlmoco,
      FHoraFimAlmoco,
      FTempoExpediente : String;
    public
      property HoraInicio: String read FHoraInicio write FHoraInicio;
      property HoraInicioAlmoco: String read FHoraInicioAlmoco write FHoraInicioAlmoco;
      property HoraFimAlmoco: String read FHoraFimAlmoco write FHoraFimAlmoco;
      property TempoExpediente: String read FTempoExpediente write FTempoExpediente;
      function CalculaHoraSaida : String;
      function ValidaCampos : String;

  end;

implementation

{ TCalculoHorarioSaida }

function TCalculoHorarioSaida.CalculaHoraSaida: String;
var
  lTempoExpediente,
  lInicio,
  lInicioAlmoco,
  lRetornoAlmoco: TDateTime;
begin
   lInicio := StrTotime(FHoraInicio);
   lInicioAlmoco := StrTotime(FHoraInicioAlmoco);
   lRetornoAlmoco := StrTotime(FHoraFimAlmoco);
   lTempoExpediente := StrTotime(FTempoExpediente);

   Result := TimeToStr(lRetornoAlmoco +  (lTempoExpediente - (lInicioAlmoco - lInicio)));
end;

function TCalculoHorarioSaida.ValidaCampos: String;
var
  i : Integer;
begin
  try
    i := 0;

    StrToTime(TempoExpediente);
    i := 1;

    StrToTime(FHoraInicio);
    i := 2;

    StrToTime(HoraInicioAlmoco);
    i := 3;

    StrToTime(HoraFimAlmoco);
  except
    case i of
      0: Result :=  'Verifique o preenchimento do tempo de expediente';
      1: Result :=  'Verifique o preenchimento do horário de entrada';
      2: Result :=  'Verifique o preenchimento do hoário de inicial do almoço';
      3: Result :=  'Verifique o preenchimento do horário final de almoço';
    end;

  end;



end;

end.
